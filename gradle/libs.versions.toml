[versions]
agp = "8.12.3"
android-compileSdk = "36"
android-minSdk = "33"
android-targetSdk = "36"
androidx-activity = "1.11.0"
androidx-appcompat = "1.7.1"
androidx-browser = "1.9.0"
androidx-core = "1.17.0"
androidx-espresso = "3.7.0"
androidx-lifecycle = "2.9.4"
androidx-testExt = "1.3.0"
chart = "1.1.0"
composeHotReload = "1.0.0-beta07"
composeMultiplatform = "1.9.0"
firebaseAnalytics = "34.3.0"
junit = "4.13.2"
kotlin = "2.2.20"
kotlinx-coroutines = "1.10.2"
kottie = "2.1.0"
kvault = "1.12.0"
libphonenumber = "0.1.8"
material3 = "1.9.0-beta06"
multiplatformMarkdownRenderer = "0.37.0"
multiplatformSettingsNoArg = "1.3.0"
moko-permissionsCompose = "0.20.1"
playServicesLocation = "21.3.0"
result = "5.6.0"
kotlinxDatetime = "0.7.1"
kotlinxSerialization = "1.9.0"
uiToolingPreviewAndroid = "1.9.1"
runtime = "1.9.1"
ui = "1.9.1"
voyagerNavigator = "1.1.0-beta03"
sqlDelight = "2.1.0"
kmputils = "1.7.0"
sqlite = "2.6.0"
testng = "6.9.6"
ktor = "3.3.0"
koin = "4.1.1"
calf = "0.8.0"
coilCompose = "3.3.0"
generativeai = "0.2.2"

[libraries]
chart = { module = "io.github.thechance101:chart", version.ref = "chart" }
firebase-ai = { module = "com.google.firebase:firebase-ai", version.ref = "firebaseAnalytics" }
firebase-analytics = { module = "com.google.firebase:firebase-analytics", version.ref = "firebaseAnalytics" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-testJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit = { module = "junit:junit", version.ref = "junit" }
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "androidx-core" }
androidx-testExt-junit = { module = "androidx.test.ext:junit", version.ref = "androidx-testExt" }
androidx-browser = { group = "androidx.browser", name = "browser", version.ref = "androidx-browser" }
androidx-espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "androidx-espresso" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appcompat" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity" }
androidx-lifecycle-viewmodelCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtimeCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
kotlinx-coroutinesSwing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
material3 = { module = "org.jetbrains.compose.material3:material3", version.ref = "material3" }
multiplatform-markdown-renderer = { module = "com.mikepenz:multiplatform-markdown-renderer", version.ref = "multiplatformMarkdownRenderer" }
multiplatform-markdown-renderer-m3 = { module = "com.mikepenz:multiplatform-markdown-renderer-m3", version.ref = "multiplatformMarkdownRenderer" }
voyager-bottom-sheet-navigator = { module = "cafe.adriel.voyager:voyager-bottom-sheet-navigator", version.ref = "voyagerNavigator" }
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyagerNavigator" }
voyager-screenmodel = { module = "cafe.adriel.voyager:voyager-screenmodel", version.ref = "voyagerNavigator" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyagerNavigator" }
voyager-tab-navigator = { module = "cafe.adriel.voyager:voyager-tab-navigator", version.ref = "voyagerNavigator" }
sqlDelight-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqlDelight" }
sqlDelight-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqlDelight" }
sqlDelight-primitiveAdapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqlDelight" }
sqlDelight-coroutinesExtensions = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqlDelight" }
kmputils-common = { module = "pro.respawn.kmmutils:common", version.ref = "kmputils" }
kmputils-compose = { module = "pro.respawn.kmmutils:compose", version.ref = "kmputils" }
sqlite-bundled = { module = "androidx.sqlite:sqlite-bundled", version.ref = "sqlite" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-ios = { module = "io.ktor:ktor-client-ios", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-contentNegotiaition = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-clientEncoding = { module = "io.ktor:ktor-client-encoding", version.ref = "ktor" }
ktor-client-serializationJson = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin" }
koin-compose-viewmodel-navigation = { module = "io.insert-koin:koin-compose-viewmodel-navigation", version.ref = "koin" }
koin-compose-viewmodel = { module = "io.insert-koin:koin-compose-viewmodel", version.ref = "koin" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
calf-ui = { group = "com.mohamedrejeb.calf", name = "calf-ui", version.ref = "calf" }
calf-permissions = { group = "com.mohamedrejeb.calf", name = "calf-permissions", version.ref = "calf" }
coil-compose = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coilCompose" }
coil-network-ktor3 = { module = "io.coil-kt.coil3:coil-network-ktor3", version.ref = "coilCompose" }
moko-permissions-compose = { module = "dev.icerock.moko:permissions-compose", version.ref = "moko-permissionsCompose" }
moko-permissions-location = { module = "dev.icerock.moko:permissions-location", version.ref = "moko-permissionsCompose" }
moko-permissions = { module = "dev.icerock.moko:permissions", version.ref = "moko-permissionsCompose" }
kottie = { module = "io.github.ismai117:kottie", version.ref = "kottie" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
kvault = { module = "com.liftric:kvault", version.ref = "kvault" }
multiplatform-settings-noArg = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatformSettingsNoArg" }
generativeai = { group = "com.google.ai.client.generativeai", name = "generativeai", version.ref = "generativeai" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
composeHotReload = { id = "org.jetbrains.compose.hot-reload", version.ref = "composeHotReload" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "composeMultiplatform" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinxSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
sqlDelight = { id = "app.cash.sqldelight", version.ref = "sqlDelight" }

[bundles]
kmpUtils = ["kmputils-common", "kmputils-compose"]
sqlDelightUtils = ["sqlDelight-coroutinesExtensions", "sqlDelight-primitiveAdapters"]
kotlinx = ["kotlinx-coroutines", "kotlinx-serialization"]
ktorBackend = ["ktor-client-serializationJson", "ktor-client-contentNegotiaition", "ktor-client-logging", "ktor-client-cio", "ktor-client-mock", "ktor-client-core", "ktor-client-clientEncoding"]
ktorMockOnlyBackend = ["ktor-client-serializationJson", "ktor-client-contentNegotiaition", "ktor-client-logging", "ktor-client-mock", "ktor-client-core"]
koin = ["koin-core", "koin-compose", "koin-compose-viewmodel", "koin-compose-viewmodel-navigation"]
voyager = ["voyager-navigator", "voyager-screenmodel", "voyager-transitions"]
coil = ["coil-compose", "coil-network-ktor3"]